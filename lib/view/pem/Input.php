<?php/** * @package    ClassDefFile * @author     K.Hamada(SCS) * @copyright  2009-2010 SAGAWA COMPUTERSYSTEM CO,.LTD. All rights reserved. *//**#@+ * include files */require_once dirname(__FILE__).'/../../Lib.php';Sgmov_Lib::useView('pem/Common');Sgmov_Lib::useForms(array('Error', 'PemSession', 'Pem001Out'));/**#@-*//** * 採用エントリー入力画面を表示します。 * @package    View * @subpackage PEM * @author     K.Hamada(SCS) * @copyright  2009-2010 SAGAWA COMPUTERSYSTEM CO,.LTD. All rights reserved. */class Sgmov_View_Pem_Input extends Sgmov_View_Pem_Common {    /**     * 都道府県サービス     * @var Sgmov_Service_Prefecture     */    public $_prefecture;    /**     * 拠点サービス     * @var Sgmov_Service_Center     */    public $_center;    /**     * コンストラクタでサービスを初期化します。     */    public function __construct() {        $this->_prefecture = new Sgmov_Service_Prefecture();        $this->_center = new Sgmov_Service_Center();    }    /**     * 処理を実行します。     * <ol><li>     * セッションに情報があるかどうかを確認     * </li><li>     * 情報有り     *   <ol><li>     *   セッション情報を元に出力情報を作成     *   </li></ol>     * </li><li>     * 情報無し     *   <ol><li>     *   出力情報を設定     *   </li></ol>     * </li><li>     * テンプレート用の値をセット     * </li><li>     * チケット発行     * </li></ol>     * @return array 生成されたフォーム情報。     * <ul><li>     * ['ticket']:チケット文字列     * </li><li>     * ['outForm']:出力フォーム     * </li><li>     * ['errorForm']:エラーフォーム     * </li></ul>     */    public function executeInner() {        // GETパラメータ取得        $getParam = $this->_parseGetParameter();                // セッションに情報があるかどうかを確認        $session = Sgmov_Component_Session::get();        $sessionForm = $session->loadForm(self::FEATURE_ID);                if (isset($sessionForm)) {            // セッション情報を元に出力情報を作成            $outForm = $this->_createOutFormByInForm($sessionForm->in);            $errorForm = $sessionForm->error;            $sessionForm->error = NULL;        } else {            // 出力情報を設定            $outForm = new Sgmov_Form_Pem001Out();            $errorForm = new Sgmov_Form_Error();        }                // セッション破棄        $session->deleteForm(self::FEATURE_ID);                    // テンプレート用の値をセット        $outForm = $this->_setTemplateValuesToOutForm($outForm, $getParam);                // チケット発行        $ticket = $session->publishTicket(self::FEATURE_ID, self::GAMEN_ID_PEM001);        return array('ticket' => $ticket,            'outForm' => $outForm,            'errorForm' => $errorForm);            }    /**     * 入力フォームの値を元に出力フォームを生成します。     * @param Sgmov_Form_Pem001In $inForm 入力フォーム     * @return Sgmov_Form_Pem001Out 出力フォーム     */    public function _createOutFormByInForm($inForm) {        $outForm = new Sgmov_Form_Pem001Out();        $outForm->raw_employ_type_cd_sel = $inForm->employ_type_cd_sel;        $outForm->raw_job_type_cd_sel = $inForm->job_type_cd_sel;        $outForm->raw_work_place_flag_sels = $inForm->work_place_flag_sels;        $outForm->raw_name = $inForm->name;        $outForm->raw_furigana = $inForm->furigana;        $outForm->raw_age_cd_sel = $inForm->age_cd_sel;        $outForm->raw_tel1 = $inForm->tel1;        $outForm->raw_tel2 = $inForm->tel2;        $outForm->raw_tel3 = $inForm->tel3;        $outForm->raw_mail = $inForm->mail;        $outForm->raw_zip1 = $inForm->zip1;        $outForm->raw_zip2 = $inForm->zip2;        $outForm->raw_pref_cd_sel = $inForm->pref_cd_sel;        $outForm->raw_address = $inForm->address;        $outForm->raw_resume = $inForm->resume;        return $outForm;    }    /**     * 出力フォームにテンプレート用の値を設定して返します。     * @param Sgmov_Form_Pem001Out $outForm 出力フォーム     * @return Sgmov_Form_Pem001Out 出力フォーム     */    public function _setTemplateValuesToOutForm($outForm, $getParam) {        $db = Sgmov_Component_DB::getPublic();        // 都道府県コードの取得        $prefs = $this->_prefecture->fetchPrefectures($db);        $outForm->raw_pref_cds = $prefs['ids'];        $outForm->raw_pref_lbls = $prefs['names'];        // 拠点コードの取得        $centers = $this->_center->fetchCenters($db);        $outForm->raw_work_place_cds = $centers['ids'];        $outForm->raw_work_place_lbls = $centers['names'];        // 年齢コードの取得        $cd = range(self::OLD_MIN, self::OLD_MAX);        $lbls = range(self::OLD_MIN, self::OLD_MAX);        $outForm->raw_age_cds = $cd;        $outForm->raw_age_lbls = $lbls;        // GET値に基づいた値設定        if (isset($getParam)) {            // 採用区分            $outForm->raw_employ_type_cd_sel = $getParam[0];            // 職種            $outForm->raw_job_type_cd_sel = $getParam[1];        }        return $outForm;    }    /**     * GETパラメータを取得します。     *     * @param none     * @return plan_cd     */    public function _parseGetParameter() {        $retParam = array();	        if (!isset($_GET['param'])) {            return NULL;        } else {            $params = explode('/', $_GET['param']);            if (!preg_match("/^[0-9]+$/", $params[0]) || !(1 <= $params[0] && $params[0] <= 3)) {                // 半角数字、または、1～3以内でない場合、0をセット                $retParam[0] = 0;            } else {                $retParam[0] = $params[0];            }	                if (!isset($params[1]) || (!preg_match("/^[0-9]+$/", $params[1]) || !(1 <= $params[1] && $params[1] <= 4))) {                // 半角数字、または、1～3以内でない場合、0をセット                $retParam[1] = 0;            } else {                $retParam[1] = $params[1];            }            // １、２個目以外の要素は無視            return $retParam;        }    }    /**     * プルダウンを生成し、HTMLソースを返します。     * TODO pre/Inputと完全一致（共通クラス化推奨）     *     * @param $cds コードの配列     * @param $lbls ラベルの配列     * @param $select 選択値     * @return 生成されたプルダウン     */    public function _createPulldown($cds, $lbls, $select) {        $html = "";        for ($i = 0; $i < count($cds); $i++) {            if ($select === $cds[$i]) {                $html .= "<option value='{$cds[$i]}' selected>{$lbls[$i]}</option>\n";            } else {                $html .= "<option value='{$cds[$i]}'>{$lbls[$i]}</option>\n";            }        }        return $html;    }    /**     * 希望勤務地のHTMLソースを返します。     *     * @param $cds コードの配列     * @param $lbls ラベルの配列     * @param $select 選択値     * @return array　HTMLソース　営業所要素NO（：は区切り文字）     */    public function _createKibouKinmuchi($cds, $lbls, $select) {        $html = "";        $eigyoSyo = "";        $j = 0;        $place_num = count($cds) / 3;        $place_num_div = ceil(count($cds) / 3);        for ($i = 0; $i < count($cds); $i++) {            $cd = $cds[$i];            $lbl = $lbls[$i];                        if (fmod($i, $place_num_div) == 0) {                $html .= "<ul class='areaList-3'>\n";            }            if (@in_array($cd, $select)) {                $html .= "<li><input type='checkbox' name='work_place_flag_sels[]' value='{$cd}' id='work{$cd}' checked /><label for='work{$cd}'>{$lbl}</label></li>\n";            } else {                $html .= "<li><input type='checkbox' name='work_place_flag_sels[]' value='{$cd}' id='work{$cd}' /><label for='work{$cd}'>{$lbl}</label></li>\n";            }                        // 営業所か確認            if (strpos($lbl, self::STR_EIGYOSYO, 0)) {            	$eigyoSyo .= "work".$cd.":";            }                        $j++;            if ($j == $place_num_div) {                $html .= "</ul>\n";                $j = 0;            }        }        if (!($place_num == 0)) {            $html .= "</ul>\n";        }                return array($html, $eigyoSyo);    }}?>